include(cstone_add_test)

function(addMpiTest source exename testname ranks)
    add_executable(${exename} ${source})
    target_include_directories(${exename} PRIVATE ${PROJECT_SOURCE_DIR}/include)
    target_include_directories(${exename} PRIVATE ${PROJECT_SOURCE_DIR}/test)
    target_include_directories(${exename} PRIVATE ${MPI_CXX_INCLUDE_PATH})
    target_compile_options(${exename} PRIVATE -Wno-unknown-pragmas)
    target_link_libraries(${exename} PRIVATE ${MPI_CXX_LIBRARIES} GTest::gtest_main)
    cstone_add_test(${testname} EXECUTABLE ${exename} RANKS ${ranks})
    install(TARGETS ${exename} RUNTIME DESTINATION ${CMAKE_INSTALL_SBINDIR}/integration_mpi)
endfunction()

function(addCstoneMpiTest source exename testname ranks)
    list(APPEND source test_main.cpp)
    addMpiTest("${source}" ${exename} ${testname} ${ranks})
endfunction()

addCstoneMpiTest(globaloctree.cpp globaloctree GlobalTreeTests 2)
addCstoneMpiTest(exchange_halos.cpp exchange_halos GlobalHaloExchange 2)
addCstoneMpiTest(box_mpi.cpp box_mpi GlobalBox 2)
addCstoneMpiTest(exchange_focus.cpp exchange_focus GlobalFocusExchange 2)
addCstoneMpiTest(exchange_keys.cpp exchange_keys GlobalKeyExchange 2)
addCstoneMpiTest(focus_transfer.cpp focus_transfer FocusTransfer 2)
addCstoneMpiTest(domain_2ranks.cpp domain_2ranks GlobalDomain2Ranks 2)
addCstoneMpiTest(domain_resize.cpp domain_resize GlobalDomainResize 2)

addCstoneMpiTest(treedomain.cpp treedomain GlobalDomainTreeIntregration 12)
addCstoneMpiTest(exchange_general.cpp exchange_general GeneralFocusExchange 12)
addCstoneMpiTest(exchange_domain.cpp exchange_domain GlobalDomainExchange 12)
addCstoneMpiTest(focus_tree.cpp focus_tree FocusTreeIntregration 12)
addCstoneMpiTest(domain_nranks.cpp domain_nranks GlobalDomainNRanks 12)

# workaround for compiling MPI with nvcc on cray systems
if (CMAKE_CUDA_COMPILER AND MPI_CXX_INCLUDE_PATH STREQUAL "" AND DEFINED ENV{CRAY_MPICH2_DIR} OR DEFINED ENV{CRAY_MPICH_DIR})
    message(STATUS "Applying MPI include workaround on CRAY")
    set(MPI_CXX_INCLUDE_PATH $ENV{MPICH_DIR}/include)
endif ()

function(addCstoneGpuMpiTest source exename testname ranks)
    addCstoneMpiTest(${source} ${exename} ${testname} ${ranks})
    target_link_libraries(${exename} PRIVATE cstone_gpu)
    if (CMAKE_CUDA_COMPILER)
        target_link_libraries(${exename} PRIVATE CUDA::cudart)
    endif ()
    if (CMAKE_HIP_COMPILER)
        target_link_libraries(${exename} PRIVATE hip::host)
        target_compile_definitions(${exename} PRIVATE THRUST_DEVICE_SYSTEM=THRUST_DEVICE_SYSTEM_HIP)
        set_target_properties(${exename} PROPERTIES LINKER_LANGUAGE CXX)
    endif ()
    if (GPU_DIRECT)
        target_compile_definitions(${exename} PRIVATE USE_GPU_DIRECT)
    endif ()
endfunction()

if (CMAKE_CUDA_COMPILER OR CMAKE_HIP_COMPILER)
    addCstoneGpuMpiTest(exchange_general_gpu.cpp exchange_general_gpu ExchangeGeneralGpu 5)
    addCstoneGpuMpiTest(exchange_halos_gpu.cpp exchange_halos_gpu GlobalHaloExchangeGpu 2)
    addCstoneGpuMpiTest(exchange_domain_gpu.cpp exchange_domain_gpu GlobalDomainExchangeGpu 2)
    addCstoneGpuMpiTest(assignment_gpu.cpp assignment_gpu AssignmentGpu 2)
    addCstoneGpuMpiTest(domain_gpu.cpp domain_gpu DomainGpu 2)
endif ()

